import pandas as pd
import numpy
import collections

#inlezen train.csv titanic-file
titanic = pd.read_csv("C:/Users/Tinka/Documents/Kaggle/Titanic/Data/train.csv",delimiter=';')

########################################### PREPARING THE TRAINING DATA SET ###########################################################

#samenvatting van de kolommen, je ziet dat de datatypes veelal fout zijn
#print([titanic[column].describe() for column in list(titanic)])

#dat ga ik corrigeren voor de kolom "Age", ik maak er een string van, vervang alle komma's door punten
titanic["Age"] = [str(item) for item in titanic["Age"]]
titanic["Age"] = [item.replace(",",".") for item in titanic["Age"]]
#ik maak een extra float kolom Lftd aan om de mediaan te kunnen berekenen
titanic["Lftd"] = [item.replace(",",".") for item in titanic["Age"]]
titanic["Lftd"] = [float(item) for item in titanic["Lftd"]]
medianlftd = str(titanic["Lftd"].median())
#de nan-waarden vervang ik door de mediaan
titanic["Age"] = [item.replace("nan",medianlftd) for item in titanic["Age"]]
#ik converteer "Age" naar het float-type en drop de Lftd-kolom
titanic["Age"] = [float(item) for item in titanic["Age"]]
titanic = titanic.drop("Lftd", 1)

#dat ga ik corrigeren voor de kolom "Fare", op dezelfde manier, ik maak er een string van, vervang alle komma's door punten
titanic["Fare"] = [str(item) for item in titanic["Fare"]]
titanic["Fare"] = [item.replace(",",".") for item in titanic["Fare"]]
#ik maak een extra float kolom Tarief aan om de mediaan te kunnen berekenen
titanic["Tarief"] = [item.replace(",",".") for item in titanic["Fare"]]
titanic["Tarief"] = [float(item) for item in titanic["Tarief"]]
medianTarief = str(titanic["Tarief"].median())
#de nan-waarden vervang ik door de mediaan
titanic["Fare"] = [item.replace("nan",medianTarief) for item in titanic["Fare"]]
#ik converteer "Fare" naar het float-type en drop de Tarief-kolom
titanic["Fare"] = [float(item) for item in titanic["Fare"]]
titanic = titanic.drop("Tarief", 1)

#dat ga ik corrigeren voor de kolom "Survived", op dezelfde manier, ik maak er een string van, vervang alle komma's door punten
titanic["Survived"] = [str(item) for item in titanic["Survived"]]
titanic["Survived"] = [item.replace(",",".") for item in titanic["Survived"]]
#ik maak een extra float kolom Overleefd aan om de mediaan te kunnen berekenen
#titanic["Overleefd"] = [item.replace(",",".") for item in titanic["Survived"]]
#titanic["Overleefd"] = [float(item) for item in titanic["Overleefd"]]
#medianOverleefd = str(titanic["Overleefd"].median())
#de nan-waarden vervang ik door de mediaan
#titanic["Survived"] = [item.replace("nan",medianOverleefd) for item in titanic["Survived"]]
#ik converteer "Survived" naar het float-type en drop de Overleefd-kolom
titanic["Survived"] = [float(item) for item in titanic["Survived"]]
#titanic = titanic.drop("Overleefd", 1)

#print([titanic[column].describe() for column in list(titanic)])
#print(collections.Counter(titanic["Age"]))

#print(titanic["Sex"].describe())
#print(titanic["Sex"].unique())

#ik vervang male door de waarde 0 en female door de waarde 1
titanic.loc[titanic["Sex"] == "male", "Sex"] = 0
titanic.loc[titanic["Sex"] == "female", "Sex"] = 1

#print(titanic["Sex"].describe())
#print(titanic["Sex"].unique())


#print(titanic["Embarked"].unique())

#ik vervang de nan-waarden in Embarked door S, de meest voorkomende code
titanic["Embarked"].fillna('S', inplace=True)

#We'll assign the code 0 to S, 1 to C and 2 to Q. Replace each value in the Embarked column with its corresponding code.
titanic.loc[titanic["Embarked"] == "S", "Embarked"] = 0
titanic.loc[titanic["Embarked"] == "C", "Embarked"] = 1
titanic.loc[titanic["Embarked"] == "Q", "Embarked"] = 2

#print(titanic["Embarked"].unique())
#print(titanic["Survived"].describe())
#print(titanic["Pclass"].describe())
#print(titanic["SibSp"].describe())
#print(titanic["Parch"].describe())
#print(titanic["Fare"].describe())
#print(titanic["Survived"].describe())


#print(titanic["Survived"])
#print(titanic["Survived"].describe())
#print(titanic["Survived"].unique())

########################################### PREPARING THE TEST DATA SET ###########################################################

#inlezen test.csv titanic-file
titanic_test = pd.read_csv("C:/Users/Tinka/Documents/Kaggle/Titanic/Data/test.csv",delimiter=';')

#kolom "Survived" ontbreekt hier

#samenvatting van de kolommen, je ziet dat de datatypes veelal fout zijn
#print([titanic_test[column].describe() for column in list(titanic_test)])

#dat ga ik corrigeren voor de kolom "Age", ik maak er een string van, vervang alle komma's door punten
titanic_test["Age"] = [str(item) for item in titanic_test["Age"]]
titanic_test["Age"] = [item.replace(",",".") for item in titanic_test["Age"]]
#ik maak een extra float kolom Lftd aan om de mediaan te kunnen berekenen

#de nan-waarden vervang ik door de mediaan. LET OP! Dit moet dezelfde waarde zijn als in de trainingset, dus niet de mediaan van de testset
titanic_test["Age"] = [item.replace("nan",medianlftd) for item in titanic_test["Age"]]
#ik converteer "Age" naar het float-type en drop de Lftd-kolom
titanic_test["Age"] = [float(item) for item in titanic_test["Age"]]

#dat ga ik corrigeren voor de kolom "Fare", op dezelfde manier, ik maak er een string van, vervang alle komma's door punten
titanic_test["Fare"] = [str(item) for item in titanic_test["Fare"]]
titanic_test["Fare"] = [item.replace(",",".") for item in titanic_test["Fare"]]
#ik maak een extra float kolom Tarief aan om de mediaan te kunnen berekenen
titanic_test["Tarief"] = [item.replace(",",".") for item in titanic_test["Fare"]]
titanic_test["Tarief"] = [float(item) for item in titanic_test["Tarief"]]

#de nan-waarden vervang ik door de mediaan. LET OP! Dit moet dezelfde waarde zijn als in de trainingset, dus niet de mediaan van de testset
titanic_test["Fare"] = [item.replace("nan",medianTarief) for item in titanic_test["Fare"]]
#ik converteer "Fare" naar het float-type en drop de Tarief-kolom
titanic_test["Fare"] = [float(item) for item in titanic_test["Fare"]]

#print([titanic_test[column].describe() for column in list(titanic_test)])
#print(collections.Counter(titanic_test["Age"]))

#print(titanic_test["Sex"].describe())
#print(titanic_test["Sex"].unique())

#ik vervang male door de waarde 0 en female door de waarde 1
titanic_test.loc[titanic_test["Sex"] == "male", "Sex"] = 0
titanic_test.loc[titanic_test["Sex"] == "female", "Sex"] = 1

#print(titanic_test["Sex"].describe())
#print(titanic_test["Sex"].unique())

#print(titanic_test["Embarked"].unique())

#ik vervang de nan-waarden in Embarked door S, de meest voorkomende code
titanic_test["Embarked"].fillna('S', inplace=True)

#We'll assign the code 0 to S, 1 to C and 2 to Q. Replace each value in the Embarked column with its corresponding code.
titanic_test.loc[titanic_test["Embarked"] == "S", "Embarked"] = 0
titanic_test.loc[titanic_test["Embarked"] == "C", "Embarked"] = 1
titanic_test.loc[titanic_test["Embarked"] == "Q", "Embarked"] = 2

#print(titanic_test["Embarked"].unique())
#print(titanic_test["Survived"].describe())
#print(titanic_test["Pclass"].describe())
#print(titanic_test["SibSp"].describe())
#print(titanic_test["Parch"].describe())
#print(titanic_test["Fare"].describe())

###################################### RANDOM FORESTS #####################################################

#Instructions: Make cross validated predictions for the titanic dataframe. Use 3 folds. 
#Use the random forest algorithm stored in alg to do the cross validation. 
#Use the predictors to predict the Survived column. Assign the result to scores.
#You can use the cross_validation.cross_val_score function to do this.
#After making cross validated predictions, print out the mean of scores.

# Import the Random Forest class

from sklearn.ensemble import RandomForestClassifier


# Sklearn also has a helper that makes it easy to do cross validation

from sklearn import cross_validation

# The columns we'll use to predict the target

predictors = ["Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked"]



# Initialize our algorithm with the default parameters

# n_estimators is the number of trees we want to make

# min_samples_split is the minimum number of rows we need to make a split

# min_samples_leaf is the minimum number of samples we can have at the place where a tree branch ends (the bottom points of the tree)


# Initialize our algorithm class

alg = RandomForestClassifier(random_state=1, n_estimators=10, min_samples_split=2, min_samples_leaf=1)

# Compute the accuracy score for all the cross validation folds. (much simpler than what we did before!)

scores = cross_validation.cross_val_score(alg, titanic[predictors], titanic["Survived"], cv=3)

# Take the mean of the scores (because we have one for each fold)

print(scores.mean())


#################################### PARAMETER TUNING ##########################################################

#Instructions: We've changed the parameters used when we initialize alg to improve them. 
#Make cross validated predictions for the titanic dataframe. Use 3 folds. 
#Use the predictors to predict the Survived column. Assign the result to scores.
#After making cross validated predictions, print out the mean of scores.


# Initialize our algorithm with the default parameters

# n_estimators is the number of trees we want to make

# min_samples_split is the minimum number of rows we need to make a split

# min_samples_leaf is the minimum number of samples we can have at the place where a tree branch ends (the bottom points of the tree)


# Initialize our algorithm class

alg = RandomForestClassifier(random_state=1, n_estimators=150, min_samples_split=4, min_samples_leaf=2)
# was: alg = RandomForestClassifier(random_state=1, n_estimators=10, min_samples_split=2, min_samples_leaf=1)

# Compute the accuracy score for all the cross validation folds. (much simpler than what we did before!)

scores = cross_validation.cross_val_score(alg, titanic[predictors], titanic["Survived"], cv=3)

# Take the mean of the scores (because we have one for each fold)

print(scores.mean())


#################################### GENERATING NEW FEATURES ########################################################

# Generating a familysize column

titanic["FamilySize"] = titanic["SibSp"] + titanic["Parch"]



# The .apply method generates a new series 
# A lambda function enables us to define a function inline. To write a lambda function, you write lambda x: len(x).

titanic["NameLength"] = titanic["Name"].apply(lambda x: len(x))

#print(titanic["FamilySize"].unique())
#print(titanic["FamilySize"].describe())
#print(titanic["NameLength"].unique())
#print(titanic["NameLength"].describe())


#################################### USING THE TITLE #################################################################

import re



# A function to get the title from a name.

def get_title(name):
    
	# Use a regular expression to search for a title.  Titles always consist of capital and lowercase letters, and end with a period.
    
	title_search = re.search(' ([A-Za-z]+)\.', name)
    
	# If the title exists, extract and return it.
    
	if title_search:
        
		return title_search.group(1)
    
	return ""



# Get all the titles and print how often each one occurs.

titles = titanic["Name"].apply(get_title)

#print(pd.value_counts(titles))



# Map each title to an integer.  Some titles are very rare, and are compressed into the same codes as other titles.

title_mapping = {"Mr": 1, "Miss": 2, "Mrs": 3, "Master": 4, "Dr": 5, "Rev": 6, "Major": 7, "Col": 7, "Mlle": 8, "Mme": 8, "Don": 9, "Lady": 10, "Countess": 10, "Jonkheer": 10, "Sir": 9, "Capt": 7, "Ms": 2}

for k,v in title_mapping.items():
    
	titles[titles == k] = v



# Verify that we converted everything.

#print(pd.value_counts(titles))



# Add in the title column.

titanic["Title"] = titles


#################################### FAMILY GROuPS ##################################################################
#print(titanic["Name"])

import operator



# A dictionary mapping family name to id

family_id_mapping = {}



# A function to get the id given a row

def get_family_id(row):
    
	# Find the last name by splitting on a comma
    
	last_name = row["Name"].split(",")[0]
    
	# Create the family id
    
	family_id = "{0}{1}".format(last_name, row["FamilySize"])
    
	# Look up the id in the mapping
    
	if family_id not in family_id_mapping:
        
		if len(family_id_mapping) == 0:
            
			current_id = 1
        
		else:
            
			# Get the maximum id from the mapping and add one to it if we don't have an id
            
			current_id = (max(family_id_mapping.items(), key=operator.itemgetter(1))[1] + 1)
        
		family_id_mapping[family_id] = current_id
    
	return family_id_mapping[family_id]



# Get the family ids with the apply method

family_ids = titanic.apply(get_family_id, axis=1)


# There are a lot of family ids, so we'll compress all of the families under 3 members into one code.

family_ids[titanic["FamilySize"] < 3] = -1



# Print the count of each unique id.

# print(pd.value_counts(family_ids))



titanic["FamilyId"] = family_ids

#print(family_ids)
#print(titanic.loc[13:16]) #het valt me namelijk op dat de passengerid van het eerstvoorkomende familielid daar het familyid is, maar ik kan er mijn vinger niet helemaal op leggen


#################################### SELECTING THE BEST FEATURES ###########################################################

# Instructions: We've updated predictors. Make cross validated predictions for the titanic dataframe. Use 3 folds. 
# Use the predictors to predict the Survived column. Assign the result to scores.
# After making cross validated predictions, print out the mean of scores.

import numpy as np

import matplotlib.pyplot as plt
from sklearn.feature_selection import SelectKBest, f_classif



predictors = ["Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked", "FamilySize", "Title", "FamilyId"]



# Perform feature selection

selector = SelectKBest(f_classif, k=5)

selector.fit(titanic[predictors], titanic["Survived"])



# Get the raw p-values for each feature, and transform from p-values into scores

scores = -np.log10(selector.pvalues_)



# Plot the scores.  See how "Pclass", "Sex", "Title", and "Fare" are the best?

plt.bar(range(len(predictors)), scores)

plt.xticks(range(len(predictors)), predictors, rotation='vertical')

plt.show()



# Pick only the four best features.

predictors = ["Pclass", "Sex", "Fare", "Title"]



# Initialize our algorithm class

alg = RandomForestClassifier(random_state=1, n_estimators=150, min_samples_split=8, min_samples_leaf=4)

# was: alg = RandomForestClassifier(random_state=1, n_estimators=150, min_samples_split=4, min_samples_leaf=2)
# was: alg = RandomForestClassifier(random_state=1, n_estimators=10, min_samples_split=2, min_samples_leaf=1)

# Compute the accuracy score for all the cross validation folds. (much simpler than what we did before!)

scores = cross_validation.cross_val_score(alg, titanic[predictors], titanic["Survived"], cv=3)

# Take the mean of the scores (because we have one for each fold)

print(scores.mean())
# n.b. hij is er niet beter van geworden

#################################### ENSEMBLING: COMBINING LOGISTIC REGRESSION WITH GRADIENT BOOSTED TREE ###########################

# n.b. gradient boosted tree: Boosting involves training decision trees one after another, and feeding the errors from one tree into the next tree. 
# So each tree is building on all the other trees that came before it.

from sklearn.ensemble import GradientBoostingClassifier

import numpy as np
from sklearn.linear_model import LogisticRegression

from sklearn.cross_validation import KFold





# The algorithms we want to ensemble.

# We're using the more linear predictors for the logistic regression, and alle the predictors with the gradient boosting classifier.


algorithms = [
    
	[GradientBoostingClassifier(random_state=1, n_estimators=25, max_depth=3), ["Pclass", "Sex", "Age", "Fare", "Embarked", "FamilySize", "Title", "FamilyId"]],
    
	[LogisticRegression(random_state=1), ["Pclass", "Sex", "Fare", "FamilySize", "Title", "Age", "Embarked"]]

]



# Initialize the cross validation folds

kf = KFold(titanic.shape[0], n_folds=3, random_state=1)



predictions = []
for train, test in kf:
    
	train_target = titanic["Survived"].iloc[train]
    
	full_test_predictions = []
    
	# Make predictions for each algorithm on each fold
    
	for alg, predictors in algorithms:
        
		# Fit the algorithm on the training data.
        
		alg.fit(titanic[predictors].iloc[train,:], train_target)
        
		# Select and predict on the test fold.  
        
		# The .astype(float) is necessary to convert the dataframe to all floats and avoid an sklearn error.
        
		test_predictions = alg.predict_proba(titanic[predictors].iloc[test,:].astype(float))[:,1]
        
		full_test_predictions.append(test_predictions)
    
	# Use a simple ensembling scheme -- just average the predictions to get the final classification.
    
	test_predictions = (full_test_predictions[0] + full_test_predictions[1]) / 2
    
	# Any value over .5 is assumed to be a 1 prediction, and below .5 is a 0 prediction.
    
	test_predictions[test_predictions <= .5] = 0
    
	test_predictions[test_predictions > .5] = 1
    
	predictions.append(test_predictions)



# Put all the predictions together into one array.

predictions = np.concatenate(predictions, axis=0)



# Compute accuracy by comparing to the training data.

accuracy = sum(predictions[predictions == titanic["Survived"]]) / len(predictions)

print(accuracy)


#################################### MAKING THE SAME DATA PREPARATION CHANGES TO THE TEST SET AS WE DID TO THE TRAINING SET ###########################

# First, we'll add titles to the test set.

titles = titanic_test["Name"].apply(get_title)


# We're adding the Dona title to the mapping, because it's in the test set, but not the training set

title_mapping = {"Mr": 1, "Miss": 2, "Mrs": 3, "Master": 4, "Dr": 5, "Rev": 6, "Major": 7, "Col": 7, "Mlle": 8, "Mme": 8, "Don": 9, "Lady": 10, "Countess": 10, "Jonkheer": 10, "Sir": 9, "Capt": 7, "Ms": 2, "Dona": 10}
for k,v in title_mapping.items():
    
	titles[titles == k] = v
titanic_test["Title"] = titles
# Check the counts of each unique title.

print(pd.value_counts(titanic_test["Title"]))



# Now, we add the family size column.

titanic_test["FamilySize"] = titanic_test["SibSp"] + titanic_test["Parch"]



# Now we can add family ids.

family_ids = titanic_test.apply(get_family_id, axis=1)

family_ids[titanic_test["FamilySize"] < 3] = -1

titanic_test["FamilyId"] = family_ids

# The .apply method generates a new series 
# A lambda function enables us to define a function inline. To write a lambda function, you write lambda x: len(x).

titanic_test["NameLength"] = titanic_test["Name"].apply(lambda x: len(x))

#################################### PREDICTING ON THE TEST SET ####################################################################################

predictors = ["Pclass", "Sex", "Age", "Fare", "Embarked", "FamilySize", "Title", "FamilyId"]


algorithms = [
    
	[GradientBoostingClassifier(random_state=1, n_estimators=25, max_depth=3), predictors],
    
	[LogisticRegression(random_state=1), ["Pclass", "Sex", "Fare", "FamilySize", "Title", "Age", "Embarked"]]

]



full_predictions = []

for alg, predictors in algorithms:
    
	# Fit the algorithm using the full training data.
    
	alg.fit(titanic[predictors], titanic["Survived"])
    
	# Predict using the test dataset.  We have to convert all the columns to floats to avoid an error.
    
	predictions = alg.predict_proba(titanic_test[predictors].astype(float))[:,1]
    
	full_predictions.append(predictions)



# The gradient boosting classifier generates better predictions, so we weight it higher.

predictions = (full_predictions[0] * 3 + full_predictions[1]) / 4


# Instructions: Turn the predictions into either 0 or 1 by turning the predictions less than or equal to .5 into 0, and the predictions greater than .5 into 1.
# Then, convert the predictions to integers using the .astype(int) method -- if you don't, Kaggle will give you a score of 0.
# Finally, create a submission dataframe where the first column is PassengerId, and the second column is Survived (this will be the predictions).

predictions[predictions <= .5] = 0

predictions[predictions > .5] = 1

predictions = predictions.astype(int)
submission = pd.DataFrame({

        "PassengerId": titanic_test["PassengerId"],

        "Survived": predictions

    })

#print(submission)
# You can generate a submission file with submission.to_csv("kaggle.csv", index=False).
